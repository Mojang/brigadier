package com.mojang.brigadier;

import com.mojang.brigadier.StringReader;
import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

public class StringReader_DiffblueTest {

  @Rule public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: StringReader */

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 165 branch to line 165
   */

  @Test
  public void isAllowedInUnquotedStringInput2OutputTrue() {

    // Arrange
    final char c = '2';

    // Act
    final boolean retval = StringReader.isAllowedInUnquotedString(c);

    // Assert result
    Assert.assertEquals(true, retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 165 branch to line 165
   */

  @Test
  public void isAllowedInUnquotedStringInputNotNullOutputFalse() {

    // Arrange
    final char c = '\u0000';

    // Act
    final boolean retval = StringReader.isAllowedInUnquotedString(c);

    // Assert result
    Assert.assertEquals(false, retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 165 branch to line 165
   */

  @Test
  public void isAllowedInUnquotedStringInputNotNullOutputFalse2() {

    // Arrange
    final char c = ':';

    // Act
    final boolean retval = StringReader.isAllowedInUnquotedString(c);

    // Assert result
    Assert.assertEquals(false, retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 165 branch to line 165
   */

  @Test
  public void isAllowedInUnquotedStringInputrOutputTrue() {

    // Arrange
    final char c = 'r';

    // Act
    final boolean retval = StringReader.isAllowedInUnquotedString(c);

    // Assert result
    Assert.assertEquals(true, retval);
  }
}
